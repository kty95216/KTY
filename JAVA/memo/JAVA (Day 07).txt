JAVA (Day 07)

■ 생성자(contructor) : 객체가 생성될 때 한번 수행되는 ★메소드★ , 객체가 생성될 때에 필드에게 초기값을 제공하고 필요한 초기화 절차를 실행하는 ★메소드★
● 객체가 생성될 때 : new연산자를 만났을 때
● 필드 : 멤버변수들의 집합
● new연산자가 객체를 만들어 낼 때 default값 : 정수 = 0 , 문자열(string) = null값(0이 아니라 아무것도 없음 , 비어있음) , 문자(char) = 아무것도 않 나옴
● 생성자의 특징 : 	1. 수식어는 왠만하면 public.
		2. 문법적으로 반환유형 자체가 없어야함. (반드시 꼭 무조건 만족해야만 생성자로 인식함)  --> return값이 없다는 이야기
		3. 애도 메소드니까 오버로딩이 가능.
		4. 생성자메소드의 이름은 클래스명과 완전 동일 (반드시 꼭 무조건 만족해야만 생성자로 인식함)
● 메소드 오버로딩 : 함수(메소드)이름이 같은데, 매개변수가(주체) 다른 두개이상의 함수를 정의하는 것
● this.변수 = this.가 붙으면 이변수는 멤버변수라는 것을 알려줌

☞ 입력)	public class PrivateTest 
	{
		[상태 : 속도, 색상, 주행거리]
		private int speed;
		private String color;
		private int mileage;
	
		[매개변수가 없는 생성자 -> 기본 생성자라고 말함]
		public PrivateTest()		[매개변수 정의되어 있지않으면 여기실행]
		{
			System.out.println("기본 생성자 입니다.");
			this.speed = 0;
			this.mileage = 0;
			this.color = "WHITE";
		}
		
		public PrivateTest(int s, String c, int m)	[매개변수 정의되어 있으면 여기실행]
		{
			System.out.println("매개변수 3개 받는 생성자입니다.");
			this.speed = s;
			this.mileage = m;
			this.color = c;
		}
		public String toString()
		{
			return "현재속도 : " + speed +
					"\n색    상 : " + color +
					"\n주행거리 : " + mileage;
		}
	}
☞ 입력)	public class PrivateTest2 
	{
		public static void main(String[] args) 
		{
			PrivateTest c1 = new PrivateTest(100, "PINK" , 10000);  [매개변수 정의]
			PrivateTest c2 = new PrivateTest();  [매개변수 정의X]
			System.out.println(c1);
			System.out.println(c2);
		}
	}
☞ 출력)	매개변수 3개 받는 생성자입니다.
	기본 생성자 입니다.
	현재속도 : 100
	색    상 : PINK
	주행거리 : 10000
	현재속도 : 0
	색    상 : WHITE
	주행거리 : 0

● 생성자를 하나도 정의하지 않았을 때에는 : 몸통이 텅 비어있는 기본생성자를 컴파일러가 자동으로 끼어넣어 줬던거다.
● 생성자가 이미 존재하면 -> 기본생성자 자동생성 서비스 안해줌 ㅠㅠ 기본생성자를 쓰고싶다면 이제부터는 만들어서 써야됨

■ 정적 변수
● 인스턴스 변수(instance variable) : 객체마다 하나씩 있는 변수 = 멤버변수
● 정적 변수(static variable) : 모든 객체를 통틀어서 딱 하나만 있는 변수 , 멤버변수와는 다르게 객체를 생성하지 않아도 아무리 많이 생성해도 딱 한개만 존재하는 변수
● 컴파일(구분할)때 만들어지는 것들 다 : 정적 , 런타임하면서 만들어지는 것들 다 : 동적 (heap영역에 있고 , stack영역에 있고 , new연산자로 만들어지는 것들은 다 동적)
● static(정적)이 붙어있으면 class영역에 만들어 놓음 (컴파일 때!!!)
● 메인함수에 static이 붙어있는 이유 -> 런타임하기전에(컴파일 때) 메인함수를 미리 만들어(구분해) 놓아야 런타임 때 바로 실행 가능하기 때문에

☞ 입력)	public class Car 
	{
		private int speed;
		private int mileage;
		private String color;
		
		[자동차의 시리얼 번호]
		private int id;
		
		[실체화된 Car 객체의 개수를 위한 정적 변수]
		public static int numberOfCars;
		
		public Car()
		{
			[자동차의 개수를 증가하고 id번호를 할당한다.]
			id = ++numberOfCars;
		}
		
		@Override
		public String toString() 
		{
			return "Car [speed=" + speed + ", mileage=" + mileage + ", color=" + color + ", id=" + id + "]";
		}
	
		public int getSpeed() 
		{
			return speed;
		}
	
		public void setSpeed(int speed) 
		{
			this.speed = speed;
		}
	
		public int getMileage() 
		{
			return mileage;
		}
	
		public void setMileage(int mileage) 
		{
			this.mileage = mileage;
		}
	
		public String getColor() 
		{
			return color;
		}
	
		public void setColor(String color) 
		{
			this.color = color;
		}
	
		public int getId() 
		{
			return id;
		}
	
		public void setId(int id) 
		{
			this.id = id;
		}	
	}
☞ 입력)	public class CarTest 
	{
		public static void main(String[] args) 
		{
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);
			Car c1 = new Car();
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);
			Car c2 = new Car();
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);
			
			c1.setColor("핑크");
			c2.setColor("파랑");
			
			c1.setSpeed(100);
			c2.setSpeed(200);
			
			c1.setMileage(500);
			c2.setMileage(800);
			
			System.out.println(c1);
			System.out.println(c2);
			
			System.out.println("c1.numberOfCars : " + c1.numberOfCars);
			System.out.println("c2.numberOfCars : " + c2.numberOfCars);
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);	[객체의참조변수.정적변수로 접근 가능하긴 하지만 기본적으로 정적변수는 클래스명.정적											변수로 접근하는게 더 맞음 왜냐하면 객체가 없을 때도 존재하고 , 객체 없을 때도 사용하려											면 당연한 이야기...]
		}
	}
☞ 출력)	Car.numberOfCars : 0	[객체 만들기전]
	Car.numberOfCars : 1	[객체 1개만든후]
	Car.numberOfCars : 2	[객체 2개만든후]
	Car [speed=100, mileage=500, color=핑크, id=1]
	Car [speed=200, mileage=800, color=파랑, id=2]
	c1.numberOfCars : 2		[참조되는 변수는 한개로 똑같기(통일되기) 때문에 밑에 값들도 모두 2]
	c2.numberOfCars : 2
	Car.numberOfCars : 2

● 정적변수의 용도 : 	1. 모든객체가 하나의 데이터를 공유하기 위해
		2. 각각의 객체가 항상 같은 값을 가질 변수이기 때문에 각자 공간을 차지할 필요가 없음.
● 변수 정리 :	지역변수 = 메소드 내에 생성하는 변수 (메소드 종료시 메모리상 에서 사라진다 , stack영역에 생성된다)
		멤버변수(전역변수) = 클래스 내부에 정의 , 해당클래스가 객체화 될 때마다 각 객체내에 생성된다 , 이들의 집합을 필드라고 부름 , 인스턴스 변수라고도 부름 (new연산자로 객체화 할 때 생성 , 해당 객체가 소멸될때 같이 사라진다)
		정적변수 = 클래스 내부에 static키워드를 사용해서 정의 ([컴파일 될 때 생성 = 프로그램이 실행될 때] 생성 , 프로그램이 종료될 때 사라진다.) , 클래스 변수라고도 부른다 , 같은 클래스로 만든 객체들은 같은 클래스의 영역에 있으니까 -> private을 사용하면 참조불가(private가 공유하지 않는다는 의미니까) , 클래스가 객체화 되는거랑 상관X

☞ 입력)	public class Car 
	{
		private int speed;
		private int mileage;
		private String color;
		
		[자동차의 시리얼 번호]
		private int id;
		
		[실체화된 Car 객체의 개수를 위한 정적 변수]
		public static int numberOfCars;
		
		[의미를 갖는 숫자 : 심볼릭 ★상수★ , int 형태의 심볼릭 상수의 이름은 관례적으로 대문자 사용]
		private static final int INCREASE_AMOUNT = 10;	[final : 모든프로그램이 끝날때 까지 값이 변하지않음]
		
		public Car()
		{
			[자동차의 개수를 증가하고 id번호를 할당한다.]
			id = ++numberOfCars;
		}
		
		public void speedUp()
		{
			[항상 모든 자동차는 가속할 때는 10만큼씩 증가해야됨]
			[10이라는 숫자는 그냥 숫자로서의 10이기도 하지만]
			[자동차의 속도증가량의 의미를 갖고있음]
			speed += INCREASE_AMOUNT;
		}
		
		@Override
		public String toString() 
		{
			return "Car [speed=" + speed + ", mileage=" + mileage + ", color=" + color + ", id=" + id + "]";
		}
	
		public int getSpeed() 
		{
			return speed;
		}
	
		public void setSpeed(int speed) 
		{
			this.speed = speed;
		}
	
		public int getMileage() 
		{
			return mileage;
		}
	
		public void setMileage(int mileage) 
		{
			this.mileage = mileage;
		}
	
		public String getColor() 
		{
			return color;
		}
	
		public void setColor(String color) 
		{
			this.color = color;
		}
	
		public int getId() 
		{
			return id;
		}
	
		public void setId(int id) 
		{
			this.id = id;
		}	
	}
☞ 입력)	public class CarTest 
	{
		public static void main(String[] args) 
		{
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);
			Car c1 = new Car();
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);
			Car c2 = new Car();
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);
			
			c1.setColor("핑크");
			c2.setColor("파랑");
			
			c1.setSpeed(100);
			c2.setSpeed(200);
			
			c1.setMileage(500);
			c2.setMileage(800);
			
			System.out.println(c1);
			System.out.println(c2);
			
			System.out.println("c1.numberOfCars : " + c1.numberOfCars);
			System.out.println("c2.numberOfCars : " + c2.numberOfCars);
			System.out.println("Car.numberOfCars : " + Car.numberOfCars);
		}
	}
☞ 출력)	Car.numberOfCars : 0
	Car.numberOfCars : 1
	Car.numberOfCars : 2
	Car [speed=100, mileage=500, color=핑크, id=1]
	Car [speed=200, mileage=800, color=파랑, id=2]
	c1.numberOfCars : 2
	c2.numberOfCars : 2
	Car.numberOfCars : 2

☞ 입력)	public class Car 
	{
		private int speed;
		private int mileage;
		private String color;
		
		[자동차의 시리얼 번호]
		private int id;
		
		[실체화된 Car 객체의 개수를 위한 정적 변수]
		private static int numberOfCars;
		
		public static int getNumberOfCars() 
		{
			[정적메소드의 활용 용도]
			[1. 정적변수에 대한 게터 세터]
			return numberOfCars;
		}
		
		[의미를 갖는 숫자 : 심볼릭 ★상수★ , int 형태의 심볼릭 상수의 이름은 관례적으로 대문자 사용]
		private static final int INCREASE_AMOUNT = 10;	[final : 모든프로그램이 끝날때 까지 값이 변하지않음]
		
		public Car()
		{
			[자동차의 개수를 증가하고 id번호를 할당한다.]
			id = ++numberOfCars;
		}
		
		public void speedUp()
		{
			[항상 모든 자동차는 가속할 때는 10만큼씩 증가해야됨]
			[10이라는 숫자는 그냥 숫자로서의 10이기도 하지만]
			[자동차의 속도증가량의 의미를 갖고있음]
			speed += INCREASE_AMOUNT;
		}
		
		@Override
		public String toString() 
		{
			return "Car [speed=" + speed + ", mileage=" + mileage + ", color=" + color + ", id=" + id + "]";
		}
	
		public int getSpeed() 
		{
			return speed;
		}
	
		public void setSpeed(int speed) 
		{
			this.speed = speed;
		}
	
		public int getMileage() 
		{
			return mileage;
		}
	
		public void setMileage(int mileage) 
		{
			this.mileage = mileage;
		}
	
		public String getColor() 
		{
			return color;
		}
	
		public void setColor(String color) 
		{
			this.color = color;
		}
	
		public int getId() 
		{
			return id;
		}
	
		public void setId(int id) 
		{
			this.id = id;
		}	
	}
☞ 입력)	public class CarTest 
	{
		public static void main(String[] args) 
		{
			System.out.println(Car.getNumberOfCars());
		}
	}
☞ 출력)	0

● 가비지 컬렉터(쓰레기 값 청소기) 강제로 일으키기
☞ 입력)	public class Employee 
	{
		private String name;
		private double salary;
		private static int count = 0;
		
		public Employee(String name, double salary)
		{
			this.name = name;
			this.salary = salary;
			count ++;
		}
		
		public Employee()
		{
			[TODO Auto-generated constructor stub]
			System.out.println("객체생성");
			name = "이름없음";
			salary = 300;
			count ++;
		}
	
		@Override
		public String toString()
		{
			return "Employee [name=" + name + ", salary=" + salary + "]";
			[toString은 우리가 만들지 않아도 원래 존재하는 친구임...]
			[해당 객체가 문자열 화 될 때 어떤모양의 문자열로 바뀔지를 결정하는 기능.]
			[이미 존재하지만 똑같은 이름으로 toString을 다시 만들어주면]
			[해당 객체가 문자열화 될 때 우리가 정의한 내용에 맞게 문자열화 되는기능.]
		}
		
		protected void finalize()	[finalize도 원래 존재하는 함수 , 객체가 소멸되기 직전에 호출되는 메소드 , 우리가 똑같은 이름으로 다시 정의하면 해당 객체가 소멸될 때 우리가 						정의한 함수의 내용을 실행함]
		{
			count--;
		}
		
		public static int getCount() 
		{
			return count;
		}
	
		public static void setCount(int count) 
		{
			Employee.count = count;
		}
	
		public String getName() 
		{
			return name;
		}
	
		public void setName(String name) 
		{
			this.name = name;
		}
	
		public double getSalary() 
		{
			return salary;
		}
	
		public void setSalary(double salary) 
		{
			this.salary = salary;
		}
	}
☞ 입력)	public class EmployeeTest 
	{
		public static void main(String[] args) 
		{
			Employee e1, e2, e3;
			
			e1 = new Employee("철수", 35000);
			e2 = new Employee("영희", 40000);
			e3 = new Employee("민상", 50000);
			
			int n = Employee.getCount();
			System.out.println("현재 직원 수 : " + n);
			
			System.out.println(e1);
			e1 = null;		[객체의 주소값 없앰 , stack영역의 값이 null (주소값이 null) , heap영역의 데이터는 아직 살아있음]
					[객체가 언제 사라지는지는 모름.]
			System.out.println(e1);
			
			[가비지 컬렉터를 강제로 일으키기]
			[사용하지마세요!!!]
			System.gc();	[가비지컬렉터(쓰레기 값 청소기) 깨워서]
			System.runFinalization();	[일해라!!!]
			
			n = Employee.getCount();
			System.out.println("2현재 직원 수 : " + n);
		}
	}
☞ 출력)	현재 직원 수 : 3
	Employee [name=철수, salary=35000.0]
	null
	2현재 직원 수 : 2

■ 상속 : 어떤 클래스가 다른 클래스의 멤버변수와 , 멤버함수를 물려받는 것 , 이어붙여 진다 (따로따로 아님)
● 상속의 장점 : 	1. 상속을 통하여 기존 클래스의 필드와 메소드를 재사용
		2. 기존 클래스의 일부 변경도 가능
		3. 상속은 이미 작성된 검증된 소프트웨어를 재사용
		4. 신뢰성 있는 소프트웨어를 손쉽게 개발 , 유지 보수
		5. 코드의 중복을 줄일 수 있다.
● 참고 :	슈퍼 클래스 = 부모 클래스(parent class) = 베이스 클래스(base class)
	서브 클래스 = 자식 클래스(child class) = 파생된 클래스(derived class)
	자식 클래스 입장에서 1단계위인 부모 클래스가 아니라 2단계 위부터는 모두 조상 클래스라고 부른다.